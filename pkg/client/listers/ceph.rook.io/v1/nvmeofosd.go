/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/rook/rook/pkg/apis/ceph.rook.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NvmeOfOSDLister helps list NvmeOfOSDs.
// All objects returned here must be treated as read-only.
type NvmeOfOSDLister interface {
	// List lists all NvmeOfOSDs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NvmeOfOSD, err error)
	// NvmeOfOSDs returns an object that can list and get NvmeOfOSDs.
	NvmeOfOSDs(namespace string) NvmeOfOSDNamespaceLister
	NvmeOfOSDListerExpansion
}

// nvmeOfOSDLister implements the NvmeOfOSDLister interface.
type nvmeOfOSDLister struct {
	indexer cache.Indexer
}

// NewNvmeOfOSDLister returns a new NvmeOfOSDLister.
func NewNvmeOfOSDLister(indexer cache.Indexer) NvmeOfOSDLister {
	return &nvmeOfOSDLister{indexer: indexer}
}

// List lists all NvmeOfOSDs in the indexer.
func (s *nvmeOfOSDLister) List(selector labels.Selector) (ret []*v1.NvmeOfOSD, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NvmeOfOSD))
	})
	return ret, err
}

// NvmeOfOSDs returns an object that can list and get NvmeOfOSDs.
func (s *nvmeOfOSDLister) NvmeOfOSDs(namespace string) NvmeOfOSDNamespaceLister {
	return nvmeOfOSDNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NvmeOfOSDNamespaceLister helps list and get NvmeOfOSDs.
// All objects returned here must be treated as read-only.
type NvmeOfOSDNamespaceLister interface {
	// List lists all NvmeOfOSDs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NvmeOfOSD, err error)
	// Get retrieves the NvmeOfOSD from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NvmeOfOSD, error)
	NvmeOfOSDNamespaceListerExpansion
}

// nvmeOfOSDNamespaceLister implements the NvmeOfOSDNamespaceLister
// interface.
type nvmeOfOSDNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NvmeOfOSDs in the indexer for a given namespace.
func (s nvmeOfOSDNamespaceLister) List(selector labels.Selector) (ret []*v1.NvmeOfOSD, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NvmeOfOSD))
	})
	return ret, err
}

// Get retrieves the NvmeOfOSD from the indexer for a given namespace and name.
func (s nvmeOfOSDNamespaceLister) Get(name string) (*v1.NvmeOfOSD, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nvmeofosd"), name)
	}
	return obj.(*v1.NvmeOfOSD), nil
}
